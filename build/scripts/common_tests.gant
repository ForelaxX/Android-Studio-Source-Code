/*
 * Copyright 2000-2012 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import static org.jetbrains.jps.idea.IdeaProjectLoader.guessHome

includeTargets << new File("${guessHome(this)}/build/scripts/utils.gant")
includeTargets << new File("${guessHome(this)}/build/scripts/cucumber-tests.gant")

requireProperty("out", "$home/out")
requireProperty("manifestJar", "${out}/test/_test_classpath_manifest.jar")

target(check: "Ensure the environment is configured") {
  tempDir = p("teamcity.build.tempDir")
}

target(compile: "Compile project") {
  ant.delete(failonerror: false) {
    fileset(dir: "$home/reports")
    fileset(dir: "$home/bin", includes: "*.hprof")
  }

  loadProject()
  projectBuilder.targetFolder = out
  projectBuilder.cleanOutput()
  projectBuilder.buildAll()
}

target(createManifest: "Build the classpath manifest") {
  // Stuff the classpaths into a manifest in a jar file since Windows can't handle
  // anything longer than 8191 characters on the command line.
  path(id: "classpaths") {
    projectBuilder.moduleRuntimeClasspath(findModule("community-main"), true).each {
      // Filter out junit.jar and explicitly include it in -classpath,
      // or else *something* won't be happy about it.
      if (!it.contains("junit.jar")) {
        pathelement(location: it)
      }
    }
  }

  // Default maxParentLevels is 2. 50 ought to be enough for the number of parent directories to pop.
  manifestclasspath(property: "manifestClasspaths", jarfile: "${manifestJar}", maxParentLevels: 50) {
    classpath(refid: "classpaths")
  }

  ant.jar(destfile: manifestJar) {
    manifest() {
      attribute(name: "Class-Path", value: "${manifestClasspaths}")
    }
  }
}

target(deleteManifest: "Delete the classpath manifest file createManifest generated") {
  delete(file: manifestJar)
}

private pass(String prop) {
  if (isDefined(prop)) {
    ant.jvmarg(value: "-D$prop=${p(prop)}")
  }
}

target('run_tests': 'Run java tests') {
  depends([check, compile, createManifest, run_junit_tests, deleteManifest])
}

target('run_junit_tests': 'Run JUnit tests') {
  ant.junit(fork: "yes", showoutput: "true", logfailedtests:false, printsummary: "true") {
    pass("idea.test.group")
    pass("idea.test.patterns")
    pass("idea.fast.only")
    pass("teamcity.build.tempDir")
    pass("teamcity.tests.recentlyFailedTests.file")
    jvmarg (value: "-Didea.platform.prefix=Idea")
    jvmarg (value: "-Djava.system.class.loader=com.intellij.util.lang.UrlClassLoader")

    System.getProperties().entrySet().each {
      if (it.key.startsWith("pass.")) {
        def trimmed = it.key.substring("pass.".length());
        jvmarg(value: "-D${trimmed}=${it.value}");
      };
    }

    commonJvmArgs().each { jvmarg(value: it) }

    if (isDefined("jvm_args")) {
      jvm_args.each { jvmarg(value: it) }
    }

    classpath {
      projectBuilder.moduleRuntimeClasspath(findModule("community-main"), true).each {
        if (it.contains("junit.jar")) {
          pathelement(location: it)
        }
      }
      pathelement(location: manifestJar)
      pathelement(location: "${jdkHome}/lib/tools.jar")
    }

    formatter(type: "plain")
    formatter(type: "xml")

    testcases.each {
      test (name: it)
    }
  }
}

target('default' : "Run all tests") {
  depends([compile, run_tests])
}