/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.nio.charset.Charset

apply plugin: "application"

project.mainClassName = "com.intellij.updater.Runner"

defaultTasks 'testUI'

repositories {
  mavenCentral()
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '3.+'
}

sourceSets {
  main {
    java      { srcDir "../src" }
    resources { srcDir "../src" }
  }
  test {
    java      { srcDir "../tests" }
    resources { srcDir "../tests" }
  }
}


test {
  testLogging {
    showStandardStreams = true
    showStackTraces = true
    exceptionFormat = "full"
  }
}

//---

task testUI(dependsOn: jar) << {
  println "## Running UI test"
  println "## Jar file: " + jar.archivePath.getAbsolutePath()

  // Create a temp dir inside the gradle build/tmp dir
  //noinspection GroovyAssignabilityCheck
  def buildTmpDir = new File(project.buildDir, "tmp");
  def tmpDir = _createTempDir(buildTmpDir)

  try {
    // create a "from version 1" and "to version 2" directories
    def dataDir1 = _createTestData(tmpDir, "1")
    assert  _mkFile(dataDir1, "plugins", "v1", "myplugin.jar").exists()
    assert !_mkFile(dataDir1, "plugins", "v2", "myplugin.jar").exists()
    assert _getFileContent(_mkFile(dataDir1, "build.txt")).equals("AI-123.45678-1")

    def dataDir2 = _createTestData(tmpDir, "2")
    assert !_mkFile(dataDir2, "plugins", "v1", "myplugin.jar").exists()
    assert  _mkFile(dataDir2, "plugins", "v2", "myplugin.jar").exists()
    assert _getFileContent(_mkFile(dataDir2, "build.txt")).equals("AI-123.45678-2")

    def patch    = _createFileContent(tmpDir, "patch.jar", "patch jar placeholder");
    patch.delete()
    assert !patch.exists()

    // call updater jar to create a diff, resulting in a patch jar.
    println "## Invoke updater <create>"
    javaexec {
      classpath jar.archivePath
      main = "com.intellij.updater.Runner"
      args "create"
      args "AI-123.45678-1"
      args "AI-123.45678-2"
      args dataDir1.getAbsolutePath()
      args dataDir2.getAbsolutePath()
      args patch.getAbsolutePath()
    }
    assert patch.exists()

    // that patch jar is self-executable. use it to update dir1 into dir2 in-place.
    println "## Invoke updater <install>"
    javaexec {
      classpath patch
      main = "com.intellij.updater.Runner"
      args "install"
      args "--exit0"
      args dataDir1.getAbsolutePath()
    }
    // build.txt should have changed to v2
    assert _getFileContent(_mkFile(dataDir1, "build.txt")).equals("AI-123.45678-2")
    // plugin v1 should have been replaced by pluging v2 in the dataDir1 directory.
    assert !_mkFile(dataDir1, "plugins", "v1", "myplugin.jar").exists()
    assert  _mkFile(dataDir1, "plugins", "v2", "myplugin.jar").exists()


  } finally {
    // Cleanup on exit
    tmpDir.deleteDir()
  }
}

// Creates a temp dir with a random name in the build/tmp directory.
File _createTempDir(File parent) {
  def d = File.createTempFile("test", "", new File(project.buildDir, "tmp"))
  d.delete()
  d.mkdirs()
  return d
}

// Creates a new directory with the specific name in the specified parent directory.
File _createDir(File parent, String name) {
  def d = new File(parent, name)
  d.mkdirs()
  return d
}

// Creates a new file with the specified name, in the specified parent directory with the given UTF-8 content.
File _createFileContent(File parentDir, String fileName, String fileContent) throws IOException {
  File f = new File(parentDir, fileName)
  OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(f), Charset.forName("UTF-8"))
  try {
    fw.write(fileContent)
  } finally {
    fw.close()
  }
  return f
}

// Returns the first line of the file. Thorws IOException if file does not exist.
String _getFileContent(File file) throws IOException {
  if (!file.exists()) throw new IOException("File not found, expected file: " + file.getName());
  BufferedReader br = new BufferedReader(new FileReader(file));
  try {
    return br.readLine();
  } finally {
    br.close();
  }
}

// Creates a new File() object with the concatenated name segments.
File _mkFile(File base, String...segments) {
  for(String segment : segments) {
    base = new File(base, segment)
  }
  return base
}

// Creates a mock test data for an idea-based IDE.
File _createTestData(File tmpDir, String value) {
  File root     = _createDir(tmpDir,  "idea-ide-" + value)
  File bin      = _createDir(root,    "bin")
  File lib      = _createDir(root,    "lib")
  File plugins  = _createDir(root,    "plugins")
  File myplugin = _createDir(plugins, "v" + value)

  _createFileContent(root,     "build.txt",    "AI-123.45678-"  + value);
  _createFileContent(bin,      "idea.exe",     "binary file "   + value);
  _createFileContent(lib,      "idea.jar",     "some jar file " + value);
  _createFileContent(myplugin, "myplugin.jar", "some jar file " + value);

  return root
}
